% \iffalse meta-comment
% !TEX program = pdfLaTeX
%<*driver>
\iffalse
%</driver>
%<*readme>
----------------------------------------------------------------
onecell -- put everything into a single tabular cell
E-mail: jspratte@yahoo.de
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
Or the GPLv3 or later
----------------------------------------------------------------

This provides a macro to create a single cell out of an
arbitrary number of rows and columns.
%</readme>
%<*driver>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</driver>
%<*install>
\input l3docstrip.tex
\keepsilent
\askforoverwritefalse

\preamble
----------------------------------------------------------------
\jobname -- put everything into a single tabular cell
E-mail: jspratte@yahoo.de
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
Or the GPLv3 or later
----------------------------------------------------------------

\endpreamble
% stop docstrip adding \endinput
\postamble

Copyright (C) 2017- by Jonathan P. Spratte <jspratte@yahoo.de>

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

http://www.latex-project.org/lppl.txt

This work may also be distributed and/or modified under the
conditions of the GPLv3 or later.

This work is "maintained" (as per LPPL maintenance status) by
Jonathan P. Spratte.

This work consists of the file  \jobname.dtx
and the derived files           \jobname.ins,
                                \jobname.pdf and
                                \jobname.sty.

\endpostamble

\usedir{tex/latex/onecell}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*driver>
\usedir{source/latex/onecell}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/onecell}
\generate{
  \file{README.txt}{\from{\jobname.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</driver>
%<*package>
\NeedsTeXFormat{LaTeX2e}
\RequirePackage{xparse,array,l3keys2e}

\ProvidesExplPackage
  {onecell} {2017/09/18}
  {v0.1}    {Place contents into a single cell}

%</package>
%<*driver>
\documentclass{l3doc}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{onecell}
\usepackage{microtype}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
%\GetFileInfo{\jobname.sty}
%
%\ExplSyntaxOff
% \title{^^A
%   \pkg{\jobname} -- put everything into a single tabular cell\thanks{^^A
%     This file describes version \fileversion, last revised \filedate.^^A
%   }^^A
% }
% \author{^^A
%   Jonathan P. Spratte\thanks{E-mail: jspratte@yahoo.de}^^A
% }
% \date{Released \filedate}
%
% \maketitle
% \tableofcontents
%
% \changes{v0.1}{2017/09/18}{Initial production version}
%
% \begin{documentation}
%
% \section{Macros}
%
% \begin{function}{?}
%   The package defines a new column type called \texttt{?}. This column type
%   repeats the following types periodically for each column which isn't
%   explicitly defined before it.
% \end{function}
%
% \begin{function}{\onecell}
%   \begin{syntax}
%     \cs{onecell}\meta{*}\meta{!}\oarg{columns}\oarg{alignment}\marg{contents}
%   \end{syntax}
%   This is the macro you should use to combine an arbitrary amount of columns
%   and rows into a single cell in a \texttt{tabular} environment. \cs{onecell}
%   uses a \texttt{tabular} environment itself to accomplish that.
%   \oarg{columns} is used to define the used column alignment. \oarg{alignment}
%   defines the vertical alignment. \marg{contents} are the contents to
%   typeset.
% \end{function}
%
%
% \begin{function}{\onecellOptions}
%   \begin{syntax}
%     \cs{onecellOptions}\marg{key=value list}
%   \end{syntax}
%   This macro can be used to setup the options for \pkg{onecell}.
% \end{function}
%
%%\StopEventually{^^A
%% \PrintChanges
%% \PrintIndex
%%}
% \end{documentation}
%
%    \begin{macrocode}
%<*package>
%<@@=onecell>
%    \end{macrocode}
%
% \begin{implementation}
%
% \section{Variables}
\ExplSyntaxOn

%    \begin{macrocode}
\tl_new:N \l_onecell_align_tl
\tl_new:N \l_onecell_columns_tl
\tl_new:N \l_onecell_use_cols_tl
%    \end{macrocode}

% \section{Column types}
%\begin{macro}{?}
%\changes{v0.1}{2017/09/18}{Initial}
%% code from https://tex.stackexchange.com/a/358114/117050
%    \begin{macrocode}
\newcolumntype{?}{!{\d@llarend&\span\@gobbletwo}}
%    \end{macrocode}
%\end{macro}
%
% \section{Macros}
%\begin{macro}{\onecell}
%\changes{v0.1}{2017/09/18}{Initial}
%    \begin{macrocode}
\NewDocumentCommand{\onecell}
  {
    s 
    >{ \@@_excl:n }t!
    >{ \@@_processor_Optional_O:Vn \l_onecell_columns_tl }O{}
    O{\l_onecell_align_tl}
    +m
  }{{% leave the double braces, else the command fails
    \@@_starred:Nn{#1}{\hspace*{-\tabcolsep}}
    \cs_set_nopar:Nn \@@_tabular: { \begin{tabular}[#4] }
    \exp_args:Nx \@@_tabular: { #3 \IfBooleanF{ #2 }{ ?#3 } }
      #5%
    \end{tabular}
    \@@_starred:Nn{#1}{\hspace*{-\tabcolsep}}
  }}
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\onecellOptions}
%\changes{v0.1}{2017/09/18}{Initial}
%    \begin{macrocode}
\NewDocumentCommand{\onecellOptions}{ +m }
  { \keys_set:nn { onecell } { #1 } }
%    \end{macrocode}
%\end{macro}
%
% \subsection{Internal}
%    \begin{macrocode}
\cs_new:Nn \@@_processor_Optional_O:nn
  {
    \tl_if_empty:nTF { #2 }
      { \def\ProcessedArgument{#1} }
      { \def\ProcessedArgument{#2} }
  }
\cs_generate_variant:Nn \@@_processor_Optional_O:nn { Vn }

%    \end{macrocode}
\msg_new:nnn { onecell } { unknown_key }
  { The~key~#1~is~unknown~and~therefore~ignored! }
%
%
% \section{Options}
%    \begin{macrocode}
\keys_define:nn { onecell } {
  ,col     .tl_set_x:N       = \l_onecell_columns_tl
  ,col     .value_required:n = true
  ,columns .meta:n           = { col = #1 }
  ,align   .tl_set_x:N       = \l_onecell_align_tl
  ,pad     .choice:
  ,pad     / remove .code:n  = \cs_set_eq:NN \@@_starred:Nn \IfBooleanF
  ,pad     / leave  .code:n  = \cs_set_eq:NN \@@_starred:Nn \IfBooleanT
  ,pad     .value_required:n = true
  ,repeat  .choice:
  ,repeat  / true   .code:n  = 
    {
      \cs_new_nopar:Npn \@@_excl:n ##1 { \def\ProcessedArgument{##1} }
    }
  ,repeat  / false  .code:n  = \cs_set_eq:NN \@@_excl:n \ReverseBoolean
  ,repeat  .default:n        = true
  ,default .meta:n           = 
    {
      ,col   = c
      ,align = c
      ,pad   = remove
      ,repeat
    }
  ,default .value_forbidden:n = true
  ,unknown .code:n     = 
    {
      \msg_error:nnx { onecell } { unknown_key } { \l_keys_key_tl }
    }
}

\keys_set:nn { onecell } { default }

\ProcessKeysOptions { onecell }
%    \end{macrocode}
\ExplSyntaxOff
% \end{implementation}
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%\Finale
